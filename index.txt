
include::/tmp/t.ad[]

In `scc` shall script:

* +++ C++ +++ snippet is decorated with usual boilerplate
* `simple.h`, `scc.h` and `codejam.h` are included
* if `/usr/include/boost` is exsist then `boost/regex.hpp` is included
* If last (or only) statement (should be an expression) is not terminated by  `;` it is sent to `std::cout`.
* if stream options are used (-n or -p), then one line is read from `std::cin` per input cycle.
	Line split into fields and snippet is executed.
	If `-p` then  line is reassembled back from fields  and sent to `std::cout`
* Generated source compiled and executed.

== SCC.H

Defines:

* F — derived from  deque<str>
* read_line()
* type str
* SCC specific shortcuts

Predefined variables (similar to AWK's):

* line	-  `std::string`,  set if with `-n` / `-p` options  or after `read_line()`
* F	-  derived from  `std::deque<str>` — line's fields; accessible like `F(i)`; counted from 0
* NF	-  `int`,  number of fields (set after read_line())
* NR 	-  `int`,  number of records (set after read_line())
* OFS 	-  `std::string`, output field separator 
* IFS 	-  `std::string`, input field separator.  
* CSV 	-  `const char[]`,  predefined regex for IFS

The `::str` type is derived from `std::string` and can be directly converted
to/from numeric types:

--------------------------------
str  s("1");
int  i;
i = s;		// 1
i = s+1;	// 2
s = 1;		// "1"
s++		// "2"
s + " m/s"	// "2 m/s"
s + 5		// "7"
---------------------------------

== SIMPLE.H

This include intended for use with small, one-file C++ programs.  For something
like Google CodeJam. It can be used independently from SCC.  

=== Everything is included

Most of STL's includes are included with `using
std::...` for most common objects. On my 4yr old laptop (no SSD), run time
with cold cache - 2sec, with warm cache  <1sec.  Usually `simple.h` is the only
include you need to include.

=== Simplified printing. 

In C++ something like numbers or strings are
printable objects.  C-arrays  or stl containers (including
sets, maps, pairs, tuples) are not printable.
Simple.h makes all these printable too.  

Examples.  Comments -  equivalent code:

--------------------------------------------------------------------
_ x;				//  cout << x;
__ x;				//  cout << x << endl;
__ a,b;				//  cout << a << ", " << b << endl;
__ a^b;				//  cout << a << "\t"  << b << endl;
__ a|b;				//  cout << a << " "  << b << endl;
__ "list: " << a,b;		//  cout << "list: " << a << ", " << b << endl;

vector<int> V{1,2,3};
_ V;				//  for (auto it=V.begin(); ....
				//  prints: {1, 2, 3}
-------------------------------------------------------------------


=== Simplified input

Object `in` can be used in initialiser expression. When a value
is read from `in`, it reads from `cin`.  Also input for aggregate types (with
non zero size): 

--------------------------------------------------------------------
int i(in);			//  int i;  cin >> i;	

vector<int> V(10);
cin >> V;			//  for(int i=0; i<10; i++)  cin >> V[i];
--------------------------------------------------------------------

== Utility finctions

Functions min/max which will work with mixed types. Expression
std::max(10, V.size()) - won't compile (you need to use (size_t)10).

push_back()/push_front() replacement:

------------------------------------
deque<int> D;
1 >> D;				//  D.push_front(1);
D << 2 << 3;			//  D.push_back(2);   D.push_back(3)
-----------------------------------


== Shortcuts


This is very similar to to what is found in Codejam's finalist code - shortcut
(macros and typedefs).  These are to squeeze C++ verbosity for one-liner
context.  Usually such shortcuts highly depends on
personal tastes, so it put in separate file - you can comment it out from
`scc`. 

See source http://github.com/lvv/scc/blob/master/codejam.h[`codejam.h`]. for full list.

Use of shortcuts (macros) is considered bad style (side effect, namespace
pollution) and discouraged for other context. If used without `scc`, it must
be included last (otherwise name collisions are guaranteed).



== Install

-----------------------------------------
git clone http://github.com/lvv/scc
PATH+=":$PWD/scc" 
echo PATH+=":$PWD/scc" >> ~/.profile
---------------------------------------
///////////////////////////////////////////////
== status
capability		|  C++200?	|	>=GCC-4.4.4	|  >=GCC-4.4.4 && Boost

expression evaluation	|	Y	|	Y		| 	Y
stl container print	|	N 	|	Y		|	Y
c-array print		| 	N 	|	N		| 	Y
stream filter		| 	Y 	|	Y		| 	Y
regex			| 	N 	|	N		| 	Y
///////////////////////////////////////////////

== TODO

* Regex which parse out last statement (for sending it to std::cout) just looks for ';', so it won't work correctly for:

	- '{ code-block; } expr'
	- string literals with '"(){}'

  Simple workaround: use semicolon before last statement.

* All (now only part) of STL should included;
* All (now only part) of STL containers should be printable;
* Is it possible to make +++C++0x+++ literal for regex?  Ideally something
	like `/abc/` or `"abc"re` for `boost::regex("abc")`. 



== Refs 

* http://www.boost.org/doc/libs/1_46_1/libs/regex/doc/html/boost_regex/introduction_and_overview.html[Boost.Regex]
* http://www.boost.org/doc/libs/1_46_1/libs/regex/doc/html/boost_regex/syntax/perl_syntax.html[Perl Regular Expression Syntax]
* http://www.boost.org/doc/libs/1_46_1/libs/regex/doc/html/boost_regex/ref/regex_token_iterator.html[regex_token_iterator]
* http://www.boost.org/doc/libs/1_46_0/libs/format/doc/format.html#examples[Boost.Fromat]
