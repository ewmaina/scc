
set -o errexit
set -v

################################################################# RANGE

################################################################# CHAIN_RANGE

# CTOR
scc 'chain_range<vint&> lv(v9);  chain_range<vint&&> rv(mk_v9());'
scc 'auto r = range(range(v9));   auto rr=range(range(mk_v9()));'

scc -A -DV=r9   'V.begin(); +V; V.end(); end(V); endz(V); -V; _ ++V, V.front(), front(V), V++, V.back(), back(V), V.size(), size(V), V.empty(), empty(V), bool(V);'
scc -A -DV=r9r  'V.begin(); +V; V.end(); end(V); endz(V); -V; _ ++V, V.front(), front(V), V++, V.back(), back(V), V.size(), size(V), V.empty(), empty(V), bool(V);'
scc -A -DV=rr9  'V.begin(); +V; V.end(); end(V); endz(V); -V; _ ++V, V.front(), front(V), V++, V.back(), back(V), V.size(), size(V), V.empty(), empty(V), bool(V);'
scc -A -DV=n9   'V.begin(); +V; V.end(); end(V); endz(V);   ; _ ++V, V.front(), front(V), V++, V.back(), back(V), V.size(), size(V), V.empty(), empty(V), bool(V);'

# access
scc 'assert( r9++==9  &&  ++r9==0 );'

scc 'auto r = range(v9);  while(r) {  _ v9++; v9--; }'
scc 'auto r = range(v9);  __ r.back(),  r++; r.back() =99; r'


# Imported methods
scc 'auto r=range(v9); r.push_back(99); r << 999;  (range(v9) << 9999)'

# Iterators
scc 'r9.begin(); rr9.begin(); '
scc 'auto it=+r9;  decltype(r9)::const_iterator cit=+r9;  assert( it==cit  &&  ++it != cit  && -r9 == endz(r9));'
scc 'assert( 1 == (*(+r9 += 1)  *  *(+r9 + 1)  *   *(1 + +r9)  *  *(-r9-size(r9)+1)  *  *(-r9 -= size(r9)-1)  *  (size(r9) == -r9 - +r9)  *  (+r9)[1]  *  r9[1]));'
scc 'assert(+r9 < -r9  &&  !(+r9 < +r9)  &&  !(-r9 < +r9)  &&  -r9 >= +r9  &&  -r9 >= -r9  &&  !(+r9 >= -r9));'
scc 'vector<pair<int,double>>  V={{1,11.},{2,22}}; auto r=range(V); _ (-- ++ (+r +=1))->second;'
scc 'auto i=+r9, ii=i+1; *i, *ii'

# rn = value_type
scc 'range(a9)=42;  a9'

# rn1 = rn2
scc 'range(v0) = a9; v0'
scc 'range(s) = cc9; s'
scc 'range(v9) = range(5); v9'

# Ct * F 	################################################################ MAP
scc '__ vint{-3,3} * abs,  str("Hello") * toupper, vint{-3,0,3,-1,10} * [](int x){return abs(x);};'
scc '__ v9 * [](int x){return x+10;};'
scc '__ v9 * bind(std::plus<int>(),10,_1);'
scc 'vector<const char*> ss{"1","22","333"};  __ (ss * strlen);'
# todo scc '__ map<int,str>{{1,"aa"},{2,"bb"}} * std::get<0,int,str>;'
#
# Ct * (R(*)(T))F    -- type convertion  
scc 'vector<const char*> v{"a", "bb", "ccc"}; v*std::strlen'
#scc 'vector<tuple<int,int>> v{{1,11}, {2,22}};   v * get<1,int,int>'
#scc ' __ v9 * bind((const int& (*)(const int&, const int&))min, 0, _1);'

# Ct || F 	################################################################ FOLD
scc '__ (v9 || min), (mk_v9()||min);'
scc '__ (vint{1,5} || function<int(int,int)>(std::plus<int>()));'
scc '__ v9 || std::plus<int>();'
scc '__ v9 || [](int a, int b){return min(a,b);};'



# PIPE
scc 'r9|is_even'
scc 'for(auto c: range(v9)|sto::is_odd)  _ c;'
scc 'for(auto c: range(s9)|sto::isdigit) _ c;'
scc 'for(auto c: range(c9)|sto::isdigit) _ c;'
################################################################# ITERATOR_RANGE
# op=(value_type)
scc 'range(v9/2, v9/5)   = 42;  v9'
scc 'range(v9/5, v9/999) = v9;  v9'

################################################################# NUMERIC_RANGE
# ctor
scc '__ range(0,10,2),  range(10,0,-1.5);'
# iter
scc 'auto ri = +range(0,21);  ri = +range(0,21);' 
# loops
scc 'numeric_range<int> r(0,10);  for(auto i=r.begin();  i!=r.end();  ++i) _ *i;""'
scc 'numeric_range<int> r(0,10,2);  for(auto x:r) _ x;""'
# stl algorithms
scc 'auto r = range(0,1.0,0.01); __ count(+r,-r,0), count_if(+r,-r, [](double x){return x<0.5;});'

scc 'range(0,21) | is_even'

# random access
scc 'auto nr=range(10);auto i=+nr;  nr[0], nr[1], *(i+=3), i[3]'
0 1 3 3



