#!/bin/bash


if [[ -z "$CXXFLAGS" ]] ;  then 
	CXXFLAGS+=" -Wall  -pipe "
fi

[ -f /etc/scc ]  && . /etc/scc
[ -f   ~/.scc ]  && .   ~/.scc
[ -f     .scc ]  && .     .scc

CXXFLAGS+=" -std=gnu++11 -Wno-unused-function "
O_FLAGS="-O3 -march=native"
g_FLAGS="-O0 -ggdb -D_GLIBCXX_DEBUG  -fdelete-null-pointer-checks -ftrapv -fbounds-check"


SCC_HOME=$(dirname $(readlink -f $0))
CXXFLAGS+=" -I $SCC_HOME -I ${SCC_HOME%/*} "

prg=/tmp/$USER-scc
src=$SCC_HOME/scc.cc
snippet_h=/tmp/snippet.h
rm -f $prg $snippet_h
execute=1

usage_exit() {
	echo "
	usage:  scc  [options]  snippet  [files|args] 
		
		-n 		- for each line: read line; split into fields; execute snippet 
		-p 		- for each line: read line; split into fields; execute snippet;  output fields
		-f filename 	- get snippet from filename
		-i ifs 		- sets simple (not regex)  IFS (input field separator).
		-F ifs 		- sets simple (not regex)  IFS (input field separator).
		-o ofs 		- sets OFS (output field separator) 
		-x filename	- save executable to file and do not execute it
		-O 		- optimized compile
		-g 		- debug compile
		-H 		- read header 
		-r 		- regenerate GCH (gcc precompiled headers) 
	"
	exit 0
}

####################################################################################### OPTIONS 
gch_dir=.gch


[[  $1 ]]  ||  usage_exit

while getopts npf:vBi:F:o:x:OgHtbr opt;  do
	case $opt in
		#n)	n_opt=1;  is_stream=1;;
		n)	CXXFLAGS+=" -Dscc_N  -Dscc_IS_STREAM ";	 n_opt=1;  is_stream=1;;
		#p)	p_opt=1;  is_stream=1;;
		p)	CXXFLAGS+=" -Dscc_P  -Dscc_IS_STREAM ";  p_opt=1;  is_stream=1;;
		f)	snippet_file=$OPTARG;;
		v)	verbose=1;;
		I)	CXXFLAGS+=" -Dscc_IFS=$OPTARG ";; 
		x)	execute=0;  prg=$OPTARG;;
		i|F)	if [[ $OPTARG =~ '"' ]];  then  CXXFLAGS+=" -Dscc_ifs=$OPTARG "
						  else  CXXFLAGS+=" -Dscc_ifs=\"$OPTARG\" ";  fi;; 
		o)	if [[ $OPTARG =~ '"' ]];  then  CXXFLAGS+=" -Dscc_OFS=$OPTARG "
						  else  CXXFLAGS+=" -Dscc_OFS=\"$OPTARG\" ";  fi;; 
		O) 	CXXFLAGS+="-O3 -march=native"; gch_dir=.gch/O;;
		g) 	CXXFLAGS+="-O0 -ggdb -D_GLIBCXX_DEBUG  -fdelete-null-pointer-checks -ftrapv -fbounds-check"; gch_dir=.gch/g;;
		H)	CXXFLAGS+=" -Dscc_HEADER "; ;;
		#t)	time="time -f'\t%E wall  ==  (%U+%S)        %M KB\n"; CXXFLAGS+="-O3 -march=native";;
		b)	CXXFLAGS+=" -Dscc_BENCHMARK ";  p_opt=1; CXXFLAGS+="-O3 -march=native";;
		r)
			set -x 
			mkdir -p .gch/O
			mkdir -p .gch/g
			g++ $CXXFLAGS $O_FLAGS cj.h -o .gch/O/cj.h.gch  
			g++ $CXXFLAGS $g_FLAGS cj.h -o .gch/g/cj.h.gch
			g++ $CXXFLAGS          cj.h -o .gch/cj.h.gch
			exit 0
			;;
		?) 	usage_exit;;
	esac
done

[[ -d $gch_dir ]] && CXXFLAGS=" -include $SCC_HOME/$gch_dir/cj.h  -Winvalid-pch  $CXXFLAGS "

# shift out snippet arg
#[[ -z $snippet_file ]]  &&  shift $((OPTIND-1))
shift $((OPTIND-1))


#####################################################################################  PARSE SNIPPET

if [[ $verbose ]] ; then 
	echo -n "expression: $1             "
	echo -n "gcc-v: `(gcc -v  2>&1) | sed -n '/^gcc version/s/^gcc version \([.0-9]*\) .*/\1/p'`            "
	echo "CXXFLAGS:  ${CXXFLAGS}"
fi 



#if [[ -x $SCC_HOME/sccpp ]];   then 
#	#  SCCPP
#	if [[ $snippet_file ]]    
#	then	cat  $snippet_file | $SCC_HOME/sccpp /dev/stdin   /tmp/snippet.h
#	else	echo "${1%% }"     | $SCC_HOME/sccpp /dev/stdin   /tmp/snippet.h
#	fi
#else
	#  SED
	if [[ $snippet_file ]]    
	then	cat  $snippet_file | sed    's/$//;s/[ \t]*$//;s/\(.*[;}]\)*\([^;}]\+$\)/\1 cout << ( \2 ); is_print_last=true;/' > /tmp/snippet.h
	else	echo "${1%% }"     | sed    's/$//;s/[ \t]*$//;s/\(.*[;}]\)*\([^;}]\+$\)/\1 cout << ( \2 ); is_print_last=true;/' > /tmp/snippet.h
		shift 1;
	fi
#fi


#####################################################################################  GENERATE SRC


${CXX-g++} $CXXFLAGS $src -o $prg $LIBS || exit 1
	
if  [[ $execute == 1 ]]  ; then 
	LCC_ALL=C $time $prg "$@"
	exit $?
else
	exit 0
fi

# vim:set ts=8 sw=8 syntax=sh:   
