#!/bin/sh


[ -f     .scc ]  && .     .scc
[ -f   ~/.scc ]  && .   ~/.scc
[ -f /etc/scc ]  && . /etc/scc

CXXFLAGS+=" -Wall -std=gnu++0x  -ggdb3 -O0 "
FILE=$(find $0  -printf '%l\n')
SCC_HOME+="$(dirname ${FILE:-$0})"
CXXFLAGS+=" -I $SCC_HOME "

if [ -d /usr/include/boost ];  then 
	LIBS+='-lboost_regex'
	CXXFLAGS+=" -DUSE_BOOST "
fi 

prg=/tmp/$USER-scc
src=$prg.cc
: ${1? Usage: css [options] 'c++ snippet' [arg...] }

echo '
	#include <simple.h>
	using namespace std;
	int main(int argc, const char** argv) {
		//string __attribute__((unused))	s, line;
		//int	 __attribute__((unused))	i=0,j=0, n=0;
		//char __attribute__((unused))	c;
' 		>  $src

#echo -e ' A;\n B; A\n A\n B; A\n {}A\n B({A})\n'|tee /dev/tty|   sed 's/\({[^}]*}\)\{0\}\(\(\((.*)\)\|[^;]\)\+$\)/cout << ( \2 );/'
#echo "$@" | sed 's/\(.*[;}]\)*\([^;}]\+$\)/\1 cout << ( \2 );/' >> $src

case $1 in

	-n) shift
		snippet=`echo "$1" | sed 's/\(.*[;}]\)*\([^;}]\+$\)/\1 cout << ( \2 );/'`
		echo '
			string line;
			vector<string> _F;	
			while ( getline(cin,line)) {
				split(_F, line, boost::is_any_of("\t "));
				'$snippet'
			;}
		' >> $src ;;

	*)  
		snippet=`echo "$1" | sed 's/\(.*[;}]\)*\([^;}]\+$\)/\1 cout << ( \2 );/'`
		echo                                              $snippet      >> $src ;;

esac
		




echo '
	; cout << flush << endl;
} ' 		>>  $src
#cat $src

shift
${CXX-g++} $CXXFLAGS $prg.cc -o $prg $LIBS && $prg "$@"
# vim:set ts=4 sw=4 syntax=sh:   
